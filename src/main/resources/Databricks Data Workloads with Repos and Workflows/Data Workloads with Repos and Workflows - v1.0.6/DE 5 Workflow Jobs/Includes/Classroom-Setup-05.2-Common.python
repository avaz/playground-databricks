{"version":"NotebookV1","origId":2139271331630277,"name":"Classroom-Setup-05.2-Common","language":"python","commands":[{"version":"CommandV1","origId":2139271331630284,"guid":"81d6f3b2-13f2-4a2c-bc71-41e04c995d6c","subtype":"command","commandType":"auto","position":8.0,"command":"@DBAcademyHelper.monkey_patch\ndef print_job_config(self):\n    \n    job_config = self.get_job_config()\n    \n    displayHTML(f\"\"\"<table style=\"width:100%\">\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Job Name:</td>\n        <td><input type=\"text\" value=\"{job_config.job_name}\" style=\"width:100%\"></td></tr>\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Batch Notebook Path:</td>\n        <td><input type=\"text\" value=\"{job_config.notebook_1}\" style=\"width:100%\"></td></tr>\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Query Notebook Path:</td>\n        <td><input type=\"text\" value=\"{job_config.notebook_2}\" style=\"width:100%\"></td></tr>\n        \n    </table>\"\"\")\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"392f925b-4ceb-4e70-a976-abe7103341b0"},{"version":"CommandV1","origId":2139271331630280,"guid":"c43c2723-7561-455f-8af0-ac974bfaba6e","subtype":"command","commandType":"auto","position":4.0,"command":"@DBAcademyHelper.monkey_patch\ndef get_pipeline_name(self):\n    unique_name = DA.unique_name(\"-\")\n    return f\"{unique_name}: Pipeline Lab w/Job\"","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"45c68be8-4f9f-4b5f-a1a2-5252477e7434"},{"version":"CommandV1","origId":2139271331630287,"guid":"d6c82073-75e3-435f-937c-91a2f558c948","subtype":"command","commandType":"auto","position":11.0,"command":"@DBAcademyHelper.monkey_patch\ndef validate_job_config(self):\n    \"Provided by DBAcademy, this function validates the configuration of the job\"\n    import json\n    \n    pipeline_name = self.get_pipeline_name()\n    job_config = self.get_job_config()\n\n    job = self.client.jobs.get_by_name(job_config.job_name)\n    assert job is not None, f\"The job named \\\"{job_name}\\\" doesn't exist. Double check the spelling.\"\n    \n    settings = job.get(\"settings\")\n    assert settings.get(\"format\") == \"MULTI_TASK\", f\"Expected three tasks, found 1.\"\n\n    tasks = settings.get(\"tasks\", [])\n    assert len(tasks) == 3, f\"Expected three tasks, found {len(tasks)}.\"\n\n    \n    \n    # Batch-Job Task\n    batch_task = tasks[0]\n    task_name = batch_task.get(\"task_key\", None)\n    assert task_name == \"Batch-Job\", f\"Expected the first task to have the name \\\"Batch-Job\\\", found \\\"{task_name}\\\"\"\n    \n    notebook_path = batch_task.get(\"notebook_task\", {}).get(\"notebook_path\")\n    assert notebook_path == job_config.notebook_1, f\"Invalid Notebook Path for the first task. Found \\\"{notebook_path}\\\", expected \\\"{job_config.notebook_1}\\\" \"\n\n    if not self.is_smoke_test():\n        # Don't check the actual_cluster_id when running as a smoke test\n        \n        actual_cluster_id = batch_task.get(\"existing_cluster_id\", None)\n        assert actual_cluster_id is not None, f\"The first task is not configured to use the current All-Purpose cluster\"\n\n        expected_cluster_id = dbgems.get_tags().get(\"clusterId\")\n        if expected_cluster_id != actual_cluster_id:\n            actual_cluster = self.client.clusters.get(actual_cluster_id).get(\"cluster_name\")\n            expected_cluster = self.client.clusters.get(expected_cluster_id).get(\"cluster_name\")\n            assert actual_cluster_id == expected_cluster_id, f\"The first task is not configured to use the current All-Purpose cluster, expected \\\"{expected_cluster}\\\", found \\\"{actual_cluster}\\\"\"\n\n    \n    \n    # DLT\n    dlt_task = tasks[1]\n    task_name = dlt_task.get(\"task_key\", None)\n    assert task_name == \"DLT\", f\"Expected the second task to have the name \\\"DLT\\\", found \\\"{task_name}\\\"\"\n\n    actual_pipeline_id = dlt_task.get(\"pipeline_task\", {}).get(\"pipeline_id\", None)\n    assert actual_pipeline_id is not None, f\"The second task is not configured to use a Delta Live Tables pipeline\"\n    \n    expected_pipeline = self.client.pipelines().get_by_name(pipeline_name)\n    actual_pipeline = self.client.pipelines().get_by_id(actual_pipeline_id)\n    actual_name = actual_pipeline.get(\"spec\").get(\"name\", \"Oops\")\n    assert actual_pipeline_id == expected_pipeline.get(\"pipeline_id\"), f\"The second task is not configured to use the correct pipeline, expected \\\"{pipeline_name}\\\", found \\\"{actual_name}\\\"\"\n    \n    depends_on = dlt_task.get(\"depends_on\", [])\n    assert len(depends_on) > 0, f\"The \\\"DLT\\\" task does not depend on the \\\"Batch-Job\\\" task\"\n    assert len(depends_on) == 1, f\"The \\\"DLT\\\" task depends on more than just the \\\"Batch-Job\\\" task\"\n    depends_task_key = depends_on[0].get(\"task_key\")\n    assert depends_task_key == \"Batch-Job\", f\"The \\\"DLT\\\" task doesn't depend on the \\\"Batch-Job\\\" task, found \\\"{depends_task_key}\\\".\"\n    \n    \n    \n    # Query Task\n    query_task = tasks[2] \n    task_name = query_task.get(\"task_key\", None)\n    assert task_name == \"Query-Results\", f\"Expected the third task to have the name \\\"Query-Results\\\", found \\\"{task_name}\\\"\"\n    \n    notebook_path = query_task.get(\"notebook_task\", {}).get(\"notebook_path\")\n    assert notebook_path == job_config.notebook_2, f\"Invalid Notebook Path for the thrid task. Found \\\"{notebook_path}\\\", expected \\\"{job_config.notebook_2}\\\" \"\n    \n    depends_on = query_task.get(\"depends_on\", [])\n    assert len(depends_on) > 0, f\"The \\\"Query-Results\\\" task does not depend on the \\\"DLT\\\" task\"\n    assert len(depends_on) == 1, f\"The \\\"Query-Results\\\" task depends on more than just the \\\"DLT\\\" task\"\n    depends_task_key = depends_on[0].get(\"task_key\")\n    assert depends_task_key == \"DLT\", f\"The \\\"Query-Results\\\" task doesn't depend on the \\\"DLT\\\" task, found \\\"{depends_task_key}\\\".\"\n\n    if not self.is_smoke_test():\n        # Don't check the actual_cluster_id when running as a smoke test\n        \n        actual_cluster_id = query_task.get(\"existing_cluster_id\", None)\n        assert actual_cluster_id is not None, f\"The second task is not configured to use the current All-Purpose cluster\"\n\n        expected_cluster_id = dbgems.get_tags().get(\"clusterId\")\n        if expected_cluster_id != actual_cluster_id:\n            actual_cluster = self.client.clusters.get(actual_cluster_id).get(\"cluster_name\")\n            expected_cluster = self.client.clusters.get(expected_cluster_id).get(\"cluster_name\")\n            assert actual_cluster_id == expected_cluster_id, f\"The second task is not configured to use the current All-Purpose cluster, expected \\\"{expected_cluster}\\\", found \\\"{actual_cluster}\\\"\"\n\n    print(\"All tests passed!\")","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"fe185ea9-12f5-4065-b344-e5816568b9ac"},{"version":"CommandV1","origId":2139271331630281,"guid":"c73c8f42-90c9-4b8a-9009-33981296ee6d","subtype":"command","commandType":"auto","position":5.0,"command":"@DBAcademyHelper.monkey_patch\ndef create_pipeline(self):\n    \"Provided by DBAcademy, this function creates the prescribed pipline\"\n    from dbacademy.dbhelper.clusters_helper_class import ClustersHelper\n    \n    path = dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None)\n    notebook = \"/\".join(path.split(\"/\")[:-1]) + \"/DE 5.2.3L - DLT Job\"\n    \n    pipeline_name = self.get_pipeline_name()\n\n    # We need to delete the existing pipline so that we can apply updates\n    # because some attributes are not mutable after creation.\n    self.client.pipelines().delete_by_name(pipeline_name)\n    \n    clusters = [{ \n        \"label\": \"default\", \n        \"num_workers\": 0 \n    }]\n    \n    policy = self.client.cluster_policies.get_by_name(ClustersHelper.POLICY_DLT_ONLY)\n    if policy is not None:\n        clusters = [{ \n            \"label\": \"default\", \n            \"num_workers\": 0,\n            \"policy_id\": policy.get(\"policy_id\")\n        }]\n        \n    response = self.client.pipelines().create(\n        name = pipeline_name, \n        storage = DA.paths.storage_location, \n        target = DA.schema_name, \n        notebooks = [notebook],\n        configuration = {\n            \"spark.master\": \"local[*]\",\n            \"datasets_path\": DA.paths.datasets,\n            \"source\": DA.paths.stream_path,\n        },\n        clusters=clusters)\n    \n    pipeline_id = response.get(\"pipeline_id\")\n\n    displayHTML(f\"\"\"<table style=\"width:100%\">\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Pipeline Name:</td>\n        <td><input type=\"text\" value=\"{pipeline_name}\" style=\"width:100%\"></td></tr>\n    \n    </table>\"\"\")\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"d494a42f-0822-4454-9357-adb4d034d1b0"},{"version":"CommandV1","origId":2139271331630289,"guid":"e7775ec1-1304-4ae1-9003-309d8ebd5ffd","subtype":"command","commandType":"auto","position":13.0,"command":"class DataFactory:\n    def __init__(self, stream_path):\n        self.stream_path = stream_path\n        self.source = f\"{DA.paths.datasets}/healthcare/tracker/streaming\"\n        try:\n            self.curr_mo = 1 + int(max([x[1].split(\".\")[0] for x in dbutils.fs.ls(self.stream_path)]))\n        except:\n            self.curr_mo = 1\n    \n    def load(self, continuous=False):\n        if self.curr_mo > 12:\n            print(\"Data source exhausted\\n\")\n        elif continuous == True:\n            while self.curr_mo <= 12:\n                curr_file = f\"{self.curr_mo:02}.json\"\n                target_dir = f\"{self.stream_path}/{curr_file}\"\n                print(f\"Loading the file {curr_file} to the {target_dir}\")\n                dbutils.fs.cp(f\"{self.source}/{curr_file}\", target_dir)\n                self.curr_mo += 1\n        else:\n            curr_file = f\"{str(self.curr_mo).zfill(2)}.json\"\n            target_dir = f\"{self.stream_path}/{curr_file}\"\n            print(f\"Loading the file {curr_file} to the {target_dir}\")\n\n            dbutils.fs.cp(f\"{self.source}/{curr_file}\", target_dir)\n            self.curr_mo += 1\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"a885aea3-e5a6-476a-9c78-8f12252d9532"},{"version":"CommandV1","origId":2139271331630278,"guid":"b91e3d03-0d4d-476d-9c96-80fd2ed3e1fb","subtype":"command","commandType":"auto","position":2.0,"command":"%run ../../Includes/_common","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"e486d8ba-7bea-4653-b3a4-932cbe4275b9"},{"version":"CommandV1","origId":2139271331630285,"guid":"2a16be37-8572-4a7f-a857-07858094ea12","subtype":"command","commandType":"auto","position":9.0,"command":"@DBAcademyHelper.monkey_patch\ndef update_cluster_params(self, params: dict, task_indexes: list):\n\n    if not self.is_smoke_test():\n        return params\n    \n    for task_index in task_indexes:\n        # Need to modify the parameters to run run as a smoke-test.\n        task = params.get(\"tasks\")[task_index]\n        del task[\"existing_cluster_id\"]\n\n        cluster_params =         {\n            \"num_workers\": \"0\",\n            \"spark_version\": self.client.clusters().get_current_spark_version(),\n            \"spark_conf\": {\n              \"spark.master\": \"local[*]\"\n            },\n        }\n\n        instance_pool_id = self.client.clusters().get_current_instance_pool_id()\n        if instance_pool_id is not None: cluster_params[\"instance_pool_id\"] = self.client.clusters().get_current_instance_pool_id()\n        else:                            cluster_params[\"node_type_id\"] = self.client.clusters().get_current_node_type_id()\n\n        task[\"new_cluster\"] = cluster_params\n        \n    return params\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"25c79e41-dcc5-4f65-b20e-11dbc4a727f1"},{"version":"CommandV1","origId":2139271331630282,"guid":"2d49ab6f-2ac0-443a-8f08-1caba9f26f84","subtype":"command","commandType":"auto","position":6.0,"command":"class JobConfig():\n    def __init__(self, job_name, notebook_1, notebook_2):\n        self.job_name = job_name\n        self.notebook_1 = notebook_1\n        self.notebook_2 = notebook_2\n    \n    def __repr__(self):\n        content =  f\"Name:      {self.job_name}\"\n        content += f\"Notebooks: {self.notebook}\"\n        return content\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"c8fc4e85-906a-43f5-8cfc-988c6f61d694"},{"version":"CommandV1","origId":2139271331630283,"guid":"d2ac6ec9-1d1a-4dd1-948d-86efae3ac0c0","subtype":"command","commandType":"auto","position":7.0,"command":"@DBAcademyHelper.monkey_patch\ndef get_job_config(self):\n    \n    unique_name = DA.unique_name(\"-\")\n    job_name = f\"{unique_name}: Jobs Lab\"\n    \n    notebook_1 = dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None)\n    notebook_1 = \"/\".join(notebook_1.split(\"/\")[:-1]) + \"/DE 5.2.2L - Batch Job\"\n\n    notebook_2 = dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None)\n    notebook_2 = \"/\".join(notebook_2.split(\"/\")[:-1]) + \"/DE 5.2.4L - Query Results Job\"\n\n    return JobConfig(job_name, notebook_1, notebook_2)\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"623dd79a-ab90-4777-8a50-8e1cb0989cb9"},{"version":"CommandV1","origId":2139271331630279,"guid":"f2b37b3f-6d36-4931-9a0b-8efd0c4d7036","subtype":"command","commandType":"auto","position":3.0,"command":"lesson_name = \"jobs_lab\"","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"cbf4d425-16d7-4088-9538-8bac01fcc07e"},{"version":"CommandV1","origId":2139271331630288,"guid":"94317520-3ee5-4f82-b7a8-cacc99674e3a","subtype":"command","commandType":"auto","position":12.0,"command":"@DBAcademyHelper.monkey_patch\ndef start_job(self):\n    job_config = self.get_job_config()\n    job_id = self.client.jobs.get_by_name(job_config.job_name).get(\"job_id\")\n    run_id = self.client.jobs.run_now(job_id).get(\"run_id\")\n    print(f\"Started job #{job_id}, run #{run_id}\")\n\n    self.client.runs.wait_for(run_id)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"d1c8d60c-4b16-460c-a5f1-607f2c04e22d"},{"version":"CommandV1","origId":2139271331630286,"guid":"c4a7037c-d6a5-4b5b-99bd-f2754b01427b","subtype":"command","commandType":"auto","position":10.0,"command":"@DBAcademyHelper.monkey_patch\ndef create_job(self):\n    \"Provided by DBAcademy, this function creates the prescribed job\"\n    \n    pipeline_name = self.get_pipeline_name()\n    job_config = self.get_job_config()\n\n    self.client.jobs.delete_by_name(job_config.job_name, success_only=False)\n    cluster_id = dbgems.get_tags().get(\"clusterId\")\n    \n    pipeline = self.client.pipelines().get_by_name(pipeline_name)\n    pipeline_id = pipeline.get(\"pipeline_id\")\n    \n    params = {\n        \"name\": job_config.job_name,\n        \"tags\": {\n            \"dbacademy.course\": self.course_config.course_name,\n            \"dbacademy.source\": self.course_config.course_name\n        },\n        \"email_notifications\": {},\n        \"timeout_seconds\": 7200,\n        \"max_concurrent_runs\": 1,\n        \"format\": \"MULTI_TASK\",\n        \"tasks\": [\n            {\n                \"task_key\": \"Batch-Job\",\n                \"libraries\": [],\n                \"notebook_task\": {\n                    \"notebook_path\": job_config.notebook_1,\n                    \"base_parameters\": []\n                },\n                \"existing_cluster_id\": cluster_id\n            },\n            {\n                \"task_key\": \"DLT\",\n                \"depends_on\": [ { \"task_key\": \"Batch-Job\" } ],\n                \"pipeline_task\": {\n                    \"pipeline_id\": pipeline_id\n                },\n            },\n            {\n                \"task_key\": \"Query-Results\",\n                \"depends_on\": [ { \"task_key\": \"DLT\" } ],\n                \"libraries\": [],\n                \"notebook_task\": {\n                    \"notebook_path\": job_config.notebook_2,\n                    \"base_parameters\": []\n                },\n                \"existing_cluster_id\": cluster_id\n            },\n        ],\n    }\n    params = self.update_cluster_params(params, [0,2])\n    \n    create_response = self.client.jobs().create(params)\n    job_id = create_response.get(\"job_id\")\n    \n    print(f\"Created job \\\"{job_config.job_name}\\\" (#{job_id})\")","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"errorDetails":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"68157d60-e570-4458-8b09-3ef1340c7a05"}],"dashboards":[],"guid":"09ed2f9d-1c1a-4232-8185-48f70e67199b","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{},"reposExportFormat":"SOURCE"}